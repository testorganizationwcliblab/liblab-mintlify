{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.19"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v3"
    }
  ],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\ncategory := pet.Category{}\ncategory.SetId(int64(123))\ncategory.SetName(\"Name\")\n\n\ntag := pet.Tag{}\ntag.SetId(int64(123))\ntag.SetName(\"Name\")\n\npetStatus := pet.PET_STATUS_AVAILABLE\n\nrequest := pet.Pet{}\nrequest.SetId(int64(123))\nrequest.SetName(\"Name\")\nrequest.SetCategory(category)\nrequest.SetPhotoUrls([]string{})\nrequest.SetTags([]pet.Tag{tag})\nrequest.SetStatus(petStatus)\n\nresponse, err := client.Pet.UpdatePet(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Category, Pet, Petstore, Tag } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const category: Category = {\n    id: 1,\n    name: 'Dogs',\n  };\n\n  const tag: Tag = {\n    id: 8,\n    name: 'name',\n  };\n\n  const petStatus = 'available';\n\n  const pet: Pet = {\n    id: 10,\n    name: 'doggie',\n    category: category,\n    photoUrls: ['photoUrls'],\n    tags: [tag],\n    status: petStatus,\n  };\n\n  const { data } = await petstore.pet.updatePet(pet);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import Pet\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Pet(\n    id_=10,\n    name=\"doggie\",\n    category={\n        \"id_\": 1,\n        \"name\": \"Dogs\"\n    },\n    photo_urls=[\n        \"photoUrls\"\n    ],\n    tags=[\n        {\n            \"id_\": 8,\n            \"name\": \"name\"\n        }\n    ],\n    status=\"available\"\n)\n\nresult = sdk.pet.update_pet(request_body=request_body)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\ncategory := pet.Category{}\ncategory.SetId(int64(123))\ncategory.SetName(\"Name\")\n\n\ntag := pet.Tag{}\ntag.SetId(int64(123))\ntag.SetName(\"Name\")\n\npetStatus := pet.PET_STATUS_AVAILABLE\n\nrequest := pet.Pet{}\nrequest.SetId(int64(123))\nrequest.SetName(\"Name\")\nrequest.SetCategory(category)\nrequest.SetPhotoUrls([]string{})\nrequest.SetTags([]pet.Tag{tag})\nrequest.SetStatus(petStatus)\n\nresponse, err := client.Pet.AddPet(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Category, Pet, Petstore, Tag } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const category: Category = {\n    id: 1,\n    name: 'Dogs',\n  };\n\n  const tag: Tag = {\n    id: 8,\n    name: 'name',\n  };\n\n  const petStatus = 'available';\n\n  const pet: Pet = {\n    id: 10,\n    name: 'doggie',\n    category: category,\n    photoUrls: ['photoUrls'],\n    tags: [tag],\n    status: petStatus,\n  };\n\n  const { data } = await petstore.pet.addPet(pet);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import Pet\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Pet(\n    id_=10,\n    name=\"doggie\",\n    category={\n        \"id_\": 1,\n        \"name\": \"Dogs\"\n    },\n    photo_urls=[\n        \"photoUrls\"\n    ],\n    tags=[\n        {\n            \"id_\": 8,\n            \"name\": \"name\"\n        }\n    ],\n    status=\"available\"\n)\n\nresult = sdk.pet.add_pet(request_body=request_body)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.FindPetsByStatusRequestParams{}\n\n\nresponse, err := client.Pet.FindPetsByStatus(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const findPetsByStatusStatus = 'available';\n\n  const { data } = await petstore.pet.findPetsByStatus({\n    status: findPetsByStatusStatus,\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import FindPetsByStatusStatus\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.find_pets_by_status(status=\"available\")\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.FindPetsByTagsRequestParams{}\n\n\nresponse, err := client.Pet.FindPetsByTags(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.findPetsByTags({\n    tags: ['tags'],\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\ntags=[\n    \"tags\"\n]\n\nresult = sdk.pet.find_pets_by_tags(tags=tags)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Pet.GetPetById(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.getPetById(9);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.get_pet_by_id(pet_id=2)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.UpdatePetWithFormRequestParams{}\n\n\nresponse, err := client.Pet.UpdatePetWithForm(context.Background(), int64(1234), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.updatePetWithForm(7, {\n    name: 'name',\n    status: 'status',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.update_pet_with_form(\n    pet_id=9,\n    name=\"name\",\n    status=\"status\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.DeletePetRequestParams{}\n\n\nresponse, err := client.Pet.DeletePet(context.Background(), int64(1234), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.deletePet(2, {\n    apiKey: 'api_key',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.delete_pet(\n    pet_id=8,\n    api_key=\"api_key\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.UploadFileRequestParams{}\n\n\nresponse, err := client.Pet.UploadFile(context.Background(), int64(1234), request, params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.uploadFile(10, {\n    additionalMetadata: 'additionalMetadata',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nwith open(\"file.ext\", \"rb\") as f:\n    request_body = f.read()\n\nresult = sdk.pet.upload_file(\n    request_body=request_body,\n    pet_id=2,\n    additional_metadata=\"additionalMetadata\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.GetInventory(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.getInventory();\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.get_inventory()\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/store\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\norderStatus := store.ORDER_STATUS_PLACED\n\nrequest := store.Order{}\nrequest.SetId(int64(123))\nrequest.SetPetId(int64(123))\nrequest.SetQuantity(int64(123))\nrequest.SetShipDate(\"ShipDate\")\nrequest.SetStatus(orderStatus)\nrequest.SetComplete(true)\n\nresponse, err := client.Store.PlaceOrder(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Order, Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const orderStatus = 'placed';\n\n  const order: Order = {\n    id: 10,\n    petId: 198772,\n    quantity: 7,\n    shipDate: 'shipDate',\n    status: orderStatus,\n    complete: true,\n  };\n\n  const { data } = await petstore.store.placeOrder(order);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import Order\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Order(\n    id_=10,\n    pet_id=198772,\n    quantity=7,\n    ship_date=\"shipDate\",\n    status=\"placed\",\n    complete=False\n)\n\nresult = sdk.store.place_order(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.GetOrderById(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.getOrderById(1);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.get_order_by_id(order_id=3)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.DeleteOrder(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.deleteOrder(7);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.delete_order(order_id=3)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := user.User{}\nrequest.SetId(int64(123))\nrequest.SetUsername(\"Username\")\nrequest.SetFirstName(\"FirstName\")\nrequest.SetLastName(\"LastName\")\nrequest.SetEmail(\"Email\")\nrequest.SetPassword(\"Password\")\nrequest.SetPhone(\"Phone\")\nrequest.SetUserStatus(int64(123))\n\nresponse, err := client.User.CreateUser(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore, User } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const user: User = {\n    id: 10,\n    username: 'theUser',\n    firstName: 'John',\n    lastName: 'James',\n    email: 'john@email.com',\n    password: '12345',\n    phone: '12345',\n    userStatus: 1,\n  };\n\n  const { data } = await petstore.user.createUser(user);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import User\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = User(\n    id_=10,\n    username=\"theUser\",\n    first_name=\"John\",\n    last_name=\"James\",\n    email=\"john@email.com\",\n    password=\"12345\",\n    phone=\"12345\",\n    user_status=1\n)\n\nresult = sdk.user.create_user(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.CreateUsersWithListInput(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.createUsersWithListInput();\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = [\n    {\n        \"id_\": 10,\n        \"username\": \"theUser\",\n        \"first_name\": \"John\",\n        \"last_name\": \"James\",\n        \"email\": \"john@email.com\",\n        \"password\": \"12345\",\n        \"phone\": \"12345\",\n        \"user_status\": 1\n    }\n]\n\nresult = sdk.user.create_users_with_list_input(request_body=request_body)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := user.LoginUserRequestParams{}\n\n\nresponse, err := client.User.LoginUser(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.loginUser({\n    username: 'username',\n    password: 'password',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.login_user(\n    username=\"username\",\n    password=\"password\"\n)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.LogoutUser(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.logoutUser();\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.logout_user()\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.GetUserByName(context.Background(), \"username\")\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.getUserByName('username');\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.get_user_by_name(username=\"username\")\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := user.User{}\nrequest.SetId(int64(123))\nrequest.SetUsername(\"Username\")\nrequest.SetFirstName(\"FirstName\")\nrequest.SetLastName(\"LastName\")\nrequest.SetEmail(\"Email\")\nrequest.SetPassword(\"Password\")\nrequest.SetPhone(\"Phone\")\nrequest.SetUserStatus(int64(123))\n\nresponse, err := client.User.UpdateUser(context.Background(), \"username\", request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore, User } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const user: User = {\n    id: 10,\n    username: 'theUser',\n    firstName: 'John',\n    lastName: 'James',\n    email: 'john@email.com',\n    password: '12345',\n    phone: '12345',\n    userStatus: 1,\n  };\n\n  const { data } = await petstore.user.updateUser('username', user);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\nfrom petstore.models import User\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = User(\n    id_=10,\n    username=\"theUser\",\n    first_name=\"John\",\n    last_name=\"James\",\n    email=\"john@email.com\",\n    password=\"12345\",\n    phone=\"12345\",\n    user_status=1\n)\n\nresult = sdk.user.update_user(\n    request_body=request_body,\n    username=\"username\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-codeSamples": [
          {
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.DeleteUser(context.Background(), \"username\")\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Go"
          },
          {
            "source": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.deleteUser('username');\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "TypeScript"
          },
          {
            "source": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.delete_user(username=\"username\")\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
            "lang": "Python"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}